// <auto-generated />
using System;
using DbLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ZyPanel.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220609123552_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbLayer.DbTable.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TblHallId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TblHallId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DbLayer.DbTable.JoinTP", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<short>("ManualFusionTime")
                        .HasColumnType("smallint");

                    b.Property<short>("PoringFusionTime")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProductionCycle")
                        .HasColumnType("smallint");

                    b.Property<long>("TblProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("TemplateWeight")
                        .HasColumnType("int");

                    b.Property<short>("Time")
                        .HasColumnType("smallint");

                    b.Property<string>("WeightCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("WeightDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("TblProductId");

                    b.HasIndex("TblTemplateId");

                    b.ToTable("JoinTP");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblDefect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DefectLineType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DefectType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TblDefect");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblFusion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("FusionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblFusion");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHall", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("HallType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Line")
                        .IsUnique();

                    b.ToTable("TblHall");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHallSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("time");

                    b.Property<long>("TblHallId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TblHallId");

                    b.ToTable("TblHallSchedule");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHallTemplate", b =>
                {
                    b.Property<long>("TblHallId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("TblHallId", "TblTemplateId");

                    b.HasIndex("TblTemplateId");

                    b.ToTable("TblHallTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblKarset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("KarsetType")
                        .HasColumnType("tinyint");

                    b.Property<int>("PlanningTonnage")
                        .HasColumnType("int");

                    b.Property<int>("ProductTonnage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TblKarset");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblPlanning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("SchdeduleCount")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScheduleType")
                        .HasColumnType("tinyint");

                    b.Property<long>("TblHallId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TblHallId");

                    b.HasIndex("UserId");

                    b.ToTable("TblPlanning");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblPlanningInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<long>("TblPlanningId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("TemplateCount")
                        .HasColumnType("int");

                    b.Property<byte>("UnitType")
                        .HasColumnType("tinyint");

                    b.Property<string>("WeightCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TblPlanningId");

                    b.HasIndex("TblTemplateId");

                    b.ToTable("TblPlanningInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TblFusionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TechnicalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TblFusionId");

                    b.ToTable("TblProduct");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblProductionInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ChargeType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<long>("HallId")
                        .HasColumnType("bigint");

                    b.Property<int>("PutCount")
                        .HasColumnType("int");

                    b.Property<byte>("ScheduleType")
                        .HasColumnType("tinyint");

                    b.Property<int>("TakeCount")
                        .HasColumnType("int");

                    b.Property<long>("TblPlanningId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WeightCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TblPlanningId");

                    b.HasIndex("TblTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("TblProductionInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblQControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inspecter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("StationType")
                        .HasColumnType("tinyint");

                    b.Property<long>("TblPlanningId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("WasteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TblPlanningId");

                    b.HasIndex("TblProductId");

                    b.ToTable("TblQControl");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblQControlInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("DefectPlaceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsWaste")
                        .HasColumnType("bit");

                    b.Property<string>("ShieldType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TblDefectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblQControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TblDefectId");

                    b.HasIndex("TblQControlId");

                    b.ToTable("TblQControlInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("BeginTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FinishTime")
                        .HasColumnType("time");

                    b.Property<byte>("ScheduleType")
                        .HasColumnType("tinyint");

                    b.Property<long?>("SubsetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubsetId");

                    b.ToTable("TblSchedule");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TblHallId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TblHallId");

                    b.ToTable("TblStop");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblStopInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Brief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("ModifyBeginDate")
                        .HasColumnType("bit");

                    b.Property<bool>("ModifyFinishDate")
                        .HasColumnType("bit");

                    b.Property<byte>("ScheduleType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("StopType")
                        .HasColumnType("tinyint");

                    b.Property<long>("TblPlanningId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblStopId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("TechnicalNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TblPlanningId");

                    b.HasIndex("TblStopId");

                    b.HasIndex("TblTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("TblStopInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("KaviteCount")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblTonnage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<long>("TblPlanningId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TonnageDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UsedTonnageAsKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TblPlanningId");

                    b.ToTable("TblTonnage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DbLayer.DbTable.Identity.AppUser", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblHall", "TblHall")
                        .WithMany("AppUser")
                        .HasForeignKey("TblHallId");

                    b.Navigation("TblHall");
                });

            modelBuilder.Entity("DbLayer.DbTable.JoinTP", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblProduct", "TblProduct")
                        .WithMany("JoinTP")
                        .HasForeignKey("TblProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblTemplate", "TblTemplate")
                        .WithMany("JoinTP")
                        .HasForeignKey("TblTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblProduct");

                    b.Navigation("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHallSchedule", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblHall", "TblHall")
                        .WithMany("TblHallSchedule")
                        .HasForeignKey("TblHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblHall");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHallTemplate", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblHall", "TblHall")
                        .WithMany("TblHallTemplate")
                        .HasForeignKey("TblHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblTemplate", "TblTemplate")
                        .WithMany("TblHallTemplate")
                        .HasForeignKey("TblTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblHall");

                    b.Navigation("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblPlanning", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblHall", "TblHall")
                        .WithMany("TblPlanning")
                        .HasForeignKey("TblHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.Identity.AppUser", "AppUser")
                        .WithMany("TblPlanning")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("TblHall");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblPlanningInfo", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblPlanning", "TblPlanning")
                        .WithMany("TblPlanningInfo")
                        .HasForeignKey("TblPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblTemplate", "TblTemplate")
                        .WithMany("TblPlanningInfo")
                        .HasForeignKey("TblTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblPlanning");

                    b.Navigation("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblProduct", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblFusion", "TblFusion")
                        .WithMany("TblProduct")
                        .HasForeignKey("TblFusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblFusion");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblProductionInfo", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblPlanning", "TblPlanning")
                        .WithMany("TblProductionInfo")
                        .HasForeignKey("TblPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblTemplate", "TblTemplate")
                        .WithMany("TblProductionInfo")
                        .HasForeignKey("TblTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.Identity.AppUser", "AppUser")
                        .WithMany("TblProductionInfo")
                        .HasForeignKey("UserId");

                    b.OwnsOne("DbLayer.DbTable.Base.ShamsiDateSegment", "ShamsiDate", b1 =>
                        {
                            b1.Property<long>("TblProductionInfoId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<byte>("Day")
                                .HasColumnType("tinyint");

                            b1.Property<byte>("Month")
                                .HasColumnType("tinyint");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("TblProductionInfoId");

                            b1.ToTable("TblProductionInfo");

                            b1.WithOwner()
                                .HasForeignKey("TblProductionInfoId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("ShamsiDate");

                    b.Navigation("TblPlanning");

                    b.Navigation("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblQControl", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblPlanning", "TblPlanning")
                        .WithMany("TblQControl")
                        .HasForeignKey("TblPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblProduct", "TblProduct")
                        .WithMany("TblQControl")
                        .HasForeignKey("TblProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblPlanning");

                    b.Navigation("TblProduct");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblQControlInfo", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblDefect", "TblDefect")
                        .WithMany("TblQControlInfo")
                        .HasForeignKey("TblDefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblQControl", "TblQControl")
                        .WithMany("TblQControlInfo")
                        .HasForeignKey("TblQControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblDefect");

                    b.Navigation("TblQControl");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblSchedule", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblSchedule", "Subset")
                        .WithMany()
                        .HasForeignKey("SubsetId");

                    b.Navigation("Subset");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblStop", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblHall", "TblHall")
                        .WithMany("TblStop")
                        .HasForeignKey("TblHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblHall");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblStopInfo", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblPlanning", "TblPlanning")
                        .WithMany("TblStopInfo")
                        .HasForeignKey("TblPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblStop", "TblStop")
                        .WithMany("TblStopInfo")
                        .HasForeignKey("TblStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.TblTemplate", "TblTemplate")
                        .WithMany("TblStopInfo")
                        .HasForeignKey("TblTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.Identity.AppUser", "AppUser")
                        .WithMany("TblStopInfo")
                        .HasForeignKey("UserId");

                    b.OwnsOne("DbLayer.DbTable.Base.ShamsiDateSegment", "ShamsiDate", b1 =>
                        {
                            b1.Property<long>("TblStopInfoId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<byte>("Day")
                                .HasColumnType("tinyint");

                            b1.Property<byte>("Month")
                                .HasColumnType("tinyint");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("TblStopInfoId");

                            b1.ToTable("TblStopInfo");

                            b1.WithOwner()
                                .HasForeignKey("TblStopInfoId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("ShamsiDate");

                    b.Navigation("TblPlanning");

                    b.Navigation("TblStop");

                    b.Navigation("TblTemplate");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblTonnage", b =>
                {
                    b.HasOne("DbLayer.DbTable.TblPlanning", "TblPlanning")
                        .WithMany("TblTonnage")
                        .HasForeignKey("TblPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DbLayer.DbTable.Base.ShamsiDateSegment", "ShamsiDate", b1 =>
                        {
                            b1.Property<long>("TblTonnageId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<byte>("Day")
                                .HasColumnType("tinyint");

                            b1.Property<byte>("Month")
                                .HasColumnType("tinyint");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("TblTonnageId");

                            b1.ToTable("TblTonnage");

                            b1.WithOwner()
                                .HasForeignKey("TblTonnageId");
                        });

                    b.Navigation("ShamsiDate");

                    b.Navigation("TblPlanning");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DbLayer.DbTable.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DbLayer.DbTable.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.DbTable.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DbLayer.DbTable.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbLayer.DbTable.Identity.AppUser", b =>
                {
                    b.Navigation("TblPlanning");

                    b.Navigation("TblProductionInfo");

                    b.Navigation("TblStopInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblDefect", b =>
                {
                    b.Navigation("TblQControlInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblFusion", b =>
                {
                    b.Navigation("TblProduct");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblHall", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("TblHallSchedule");

                    b.Navigation("TblHallTemplate");

                    b.Navigation("TblPlanning");

                    b.Navigation("TblStop");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblPlanning", b =>
                {
                    b.Navigation("TblPlanningInfo");

                    b.Navigation("TblProductionInfo");

                    b.Navigation("TblQControl");

                    b.Navigation("TblStopInfo");

                    b.Navigation("TblTonnage");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblProduct", b =>
                {
                    b.Navigation("JoinTP");

                    b.Navigation("TblQControl");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblQControl", b =>
                {
                    b.Navigation("TblQControlInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblStop", b =>
                {
                    b.Navigation("TblStopInfo");
                });

            modelBuilder.Entity("DbLayer.DbTable.TblTemplate", b =>
                {
                    b.Navigation("JoinTP");

                    b.Navigation("TblHallTemplate");

                    b.Navigation("TblPlanningInfo");

                    b.Navigation("TblProductionInfo");

                    b.Navigation("TblStopInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
